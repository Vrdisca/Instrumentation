# -*- coding: utf-8 -*-
"""Calibração_estática_cond.res_PT100
Victor Rafael
Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1W7xjccMCObCWkrXVMPQPFUHPfSHliDn-
"""

import matplotlib.pyplot as plt

def ponte(R1, R2, R3, RX, Vin):
    V1 = -Vin * (((R3 * R1) - (R2 * RX)) / ((R2 + R1) * (R3 + RX)))
    return V1

def INA(R1, R2, R3, R4):
    A = (1 + (2 * (R2 / R1)) * (R4 / R3))
    return A

# Dados de resistência em função da temperatura
temperaturas = range(0, 101, 10)
resistencias = [
    100.00, 103.90, 107.79, 111.67, 115.54,
    119.40, 123.24, 127.07, 130.89, 134.70, 138.50
]

# Calcular a voltagem de saída para cada temperatura
vout = []
for temperatura, resistencia in zip(temperaturas, resistencias):
    vout_temp = ponte(100, 1000, 1000, resistencia, 5) * INA(10000, 158000, 1000, 1000)
    vout.append(vout_temp)

# Plotar a curva de calibração estática
plt.plot(temperaturas, vout, marker='o', linestyle='-')
plt.xlabel('Temperatura (°C)')
plt.ylabel('Voltagem de Saída (V)')
plt.title('Curva de Calibração Estática')
plt.grid(True)
for temp, v in zip(temperaturas, vout):
    plt.text(temp, v, f'{v:.2f}', ha='right')
plt.show()